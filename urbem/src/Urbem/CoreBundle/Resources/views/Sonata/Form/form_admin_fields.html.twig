{#

This file is part of the Sonata package.

(c) Thomas Rabaix <thomas.rabaix@sonata-project.org>

For the full copyright and license information, please view the LICENSE
file that was distributed with this source code.

#}

{% extends 'form_div_layout.html.twig' %}

{% block form_errors -%}
    {% if errors|length > 0 %}
        {% if not form.parent %}<div class="alert alert-danger alert-dismissable">{% endif %}
        <ul class="list-unstyled">
            {% for error in errors %}
                <li><i class="fa fa-exclamation-circle"></i> {{ error.message }}</li>
            {% endfor %}
        </ul>
        {% if not form.parent %}</div>{% endif %}
    {% endif %}
{%- endblock form_errors %}

{% block sonata_help %}
    {% spaceless %}
        {% if sonata_help is defined and sonata_help %}
            <span class="help-block sonata-ba-field-widget-help">{{ sonata_help|raw }}</span>
        {% endif %}
    {% endspaceless %}
{% endblock %}

{# Inicio da alteraÃ§Ã£o para o funcionamento do type collection #}
{# Custom Sonata Admin Extension #}

{% block sonata_admin_orm_one_to_one_widget %}
    {% include 'CoreBundle:Sonata/CRUD:edit_orm_one_to_one.html.twig' %}
{% endblock %}

{% block sonata_admin_orm_many_to_many_widget %}
    {% include 'SonataDoctrineORMAdminBundle:CRUD:edit_orm_many_to_many.html.twig' %}
{% endblock %}

{% block sonata_admin_orm_many_to_one_widget %}
    {% include 'SonataDoctrineORMAdminBundle:CRUD:edit_orm_many_to_one.html.twig' %}
{% endblock %}

{% block sonata_admin_orm_one_to_many_widget %}
    {% include 'CoreBundle:Sonata/CRUD:edit_orm_one_to_many.html.twig' %}
{% endblock %}

{% block sonata_type_model_widget %}
    {#
        This is not the best way to do if
        TODO : improve this part
    #}

    {#model {{ sonata_admin.field_description.mappingtype }}#}

    {% if sonata_admin.field_description is empty %}
        {{ block('choice_widget') }}
    {% elseif sonata_admin.field_description.mappingtype == constant('Doctrine\\ORM\\Mapping\\ClassMetadataInfo::ONE_TO_ONE') %}
        {{ block('sonata_admin_orm_one_to_one_widget') }}
    {% elseif sonata_admin.field_description.mappingtype == constant('Doctrine\\ORM\\Mapping\\ClassMetadataInfo::MANY_TO_ONE') %}
        {{ block('sonata_admin_orm_many_to_one_widget') }}
    {% elseif sonata_admin.field_description.mappingtype == constant('Doctrine\\ORM\\Mapping\\ClassMetadataInfo::MANY_TO_MANY') %}
        {{ block('sonata_admin_orm_many_to_many_widget') }}
    {% elseif sonata_admin.field_description.mappingtype == constant('Doctrine\\ORM\\Mapping\\ClassMetadataInfo::ONE_TO_MANY') %}
        {{ block('sonata_admin_orm_one_to_many_widget') }}
    {% else %}
        {#INVALID MODE : {{ id }}#}
        {{ block('choice_widget') }}
    {% endif %}
{% endblock %}

{# Fim da alteraÃ§Ã£o para o funcionamento do type collection #}

{% block form_widget -%}
    {{ parent() }}
    {{ block('sonata_help') }}
{%- endblock form_widget %}

{% block form_widget_simple %}
    {% set type = type|default('text') %}
    {% if type != 'file' %}
        {% set attr = attr|merge({'class': attr.class|default('') ~ 'campo-sonata form-control'}) %}
    {% endif %}
    {{ parent() }}
{% endblock form_widget_simple %}

{% block textarea_widget %}
    {% set attr = attr|merge({'class': attr.class|default('') ~ ' form-control'}) %}
    {{ parent() }}
{% endblock textarea_widget %}

{% block money_widget -%}
    {% if money_pattern == '{{ widget }}' %}
        {{- block('form_widget_simple') -}}
    {% else %}
        {% set currencySymbol = money_pattern|replace({'{{ widget }}': ''})|trim %}
        {% if money_pattern matches '/^{{ widget }}/' %}
            <div class="input-group">
                {{- block('form_widget_simple') -}}
                <span class="input-group-addon">{{ currencySymbol }}</span>
            </div>
        {% elseif money_pattern matches '/{{ widget }}$/' %}
            <div class="input-group">
                <span class="input-group-addon">{{ currencySymbol }}</span>
                {{- block('form_widget_simple') -}}
            </div>
        {% endif %}
    {% endif %}
{%- endblock money_widget %}

{% block percent_widget %}
    {% spaceless %}
        {% set type = type|default('text') %}
        <div class="input-group">
            {{ block('form_widget_simple') }}
            <span class="input-group-addon">%</span>
        </div>
    {% endspaceless %}
{% endblock percent_widget %}

{% block checkbox_widget -%}
    {% set parent_label_class = parent_label_class|default('') -%}
    {% if 'checkbox-inline' in parent_label_class %}
        {{- form_label(form, null, { widget: parent() }) -}}
    {% else -%}
        <div class="checkbox">
            {{- form_label(form, null, { widget: parent() }) -}}
        </div>
    {%- endif %}
{%- endblock checkbox_widget %}

{% block radio_widget -%}
    {%- set parent_label_class = parent_label_class|default('') -%}
    {% if 'radio-inline' in parent_label_class %}
        {{- form_label(form, null, { widget: parent() }) -}}
    {% else -%}
        {{- form_label(form, null, { widget: parent() }) -}}
    {%- endif %}
{%- endblock radio_widget %}

{# Labels #}
{% block form_label %}
{% spaceless %}
    {% if sonata_admin['field_description'] %}
        {% set typeFieldCustom = sonata_admin['field_description'].type %}
    {% endif %}

    {% if label is not same as(false) and sonata_admin.options['form_type'] == 'horizontal' %}
        {% set label_class = 'col-sm-3' %}
    {% endif %}

    {% set label_class = label_class|default('') ~ ' control-label' %}

    {% if label is not same as(false) %}
        {#{% if "choice" in typeFieldCustom %}#}
            {#<div class="form_row col s3 campo-sonata">#}
        {#{%  endif %}#}
        {#{% if "Choice" in typeFieldCustom %}#}
            {#</div>#}
        {#{%  endif %}#}

        {% set label_attr = label_attr|merge({'class': label_attr.class|default('') ~ label_class }) %}

        {% if not compound %}
            {% set label_attr = label_attr|merge({'for': id}) %}
        {% endif %}
        {% if required %}
            {% set label_attr = label_attr|merge({'class': (label_attr.class|default('') ~ ' required')|trim}) %}
        {% endif %}

        {% if label is empty %}
            {%- if label_format is defined and label_format is not empty -%}
                {% set label = label_format|replace({
                '%name%': name,
                '%id%': id,
                }) %}
            {%- else -%}
                {% set label = name|humanize %}
            {%- endif -%}
        {% endif %}

{% if label_attr.class is defined and "checkbox-sonata" in label_attr.class %}
    {#[AQUIIIII ABRE]#}
<div class="form_row col s3 campo-sonata">
    {%  endif %}
    <label{% for attrname, attrvalue in label_attr %} {{ attrname }}="{{ attrvalue }}"{% endfor %}>
    {% if not sonata_admin.admin %}
        {{- label|trans({}, translation_domain) -}}
    {% else %}
        {{ sonata_admin.admin.trans(label, {}, sonata_admin.field_description.translationDomain) }}
    {% endif %}
    </label>
    {% if label_attr.class is defined and "checkbox-sonata" in label_attr.class %}
        {#</div>#}
    {%  endif %}

    {% endif %}
    {% endspaceless %}
    {% endblock form_label %}

    {% block checkbox_label -%}
        {{- block('checkbox_radio_label') -}}
    {%- endblock checkbox_label %}

    {% block radio_label -%}
        {{- block('checkbox_radio_label') -}}
    {%- endblock radio_label %}

    {% block checkbox_radio_label %}
        {% if sonata_admin.admin %}
            {% set translation_domain = sonata_admin.field_description.translationDomain %}
        {% endif %}
        {# Do not display the label if widget is not defined in order to prevent double label rendering #}
        {% if widget is defined %}
            {% if required %}
                {% set label_attr = label_attr|merge({class: (label_attr.class|default('') ~ ' required')|trim}) %}
            {% endif %}
            {% if parent_label_class is defined %}
                {% set label_attr = label_attr|merge({class: (label_attr.class|default('') ~ ' ' ~ parent_label_class)|trim}) %}
            {% endif %}
            {% if label is not same as(false) and label is empty %}
                {% set label = name|humanize %}
            {% endif %}
            <label{% for attrname, attrvalue in label_attr %} {{ attrname }}="{{ attrvalue }}"{% endfor %}>
            {{- widget|raw -}}
            {%- if label is not same as(false) -%}
                <span class="control-label__text">
                    {{- label|trans({}, translation_domain) -}}
                </span>
            {%- endif -%}
            </label>
        {% endif %}
    {% endblock checkbox_radio_label %}

    {% block choice_widget_expanded %}
    {% spaceless %}
    {% set attr = attr|merge({'class': attr.class|default('') ~ 'list-check-sonata list-unstyled'}) %}
    <div class="col s12">
        <ul {{ block('widget_container_attributes') }}>
            {% for child in form %}
                <li>
                    {{ form_widget(child, {'horizontal': true, 'horizontal_input_wrapper_class': ''}) }} {# {'horizontal': false, 'horizontal_input_wrapper_class': ''} needed to avoid MopaBootstrapBundle messing with the DOM #}
                </li>
            {% endfor %}
        </ul>
    </div>
    {% if attr.class is defined and "checkbox-sonata" in attr.class %}
    {#[AQUIIIII FECHA]#}
</div>
    {% endif %}

    {% endspaceless %}
{% endblock choice_widget_expanded %}

{% block choice_widget_collapsed %}
    {% spaceless %}
        {% if required and placeholder is defined and placeholder is none %}
            {% set required = false %}
        {% elseif required and empty_value is defined and empty_value_in_choices is defined and empty_value is none and not empty_value_in_choices and not multiple %}
            {% set required = false %}
        {% endif %}

        {% set attr = attr|merge({'class': attr.class|default('') ~ ' form-control'}) %}
        {% if (sortable is defined) and sortable and multiple %}
            {{ block('sonata_type_choice_multiple_sortable') }}
        {% else %}
            <select {{ block('widget_attributes') }}{% if multiple %} multiple="multiple"{% endif %} >
                {% if empty_value is defined and empty_value is not none %}
                    <option value=""{% if required and value is empty %} selected="selected"{% endif %}>
                        {% if not sonata_admin.admin %}
                            {{- empty_value|trans({}, translation_domain) -}}
                        {% else %}
                            {{- empty_value|trans({}, sonata_admin.field_description.translationDomain) -}}
                        {% endif%}
                    </option>
                {% elseif placeholder is defined and placeholder is not none %}
                    <option value=""{% if required and value is empty %} selected="selected"{% endif %}>
                        {% if not sonata_admin.admin %}
                            {{- placeholder|trans({}, translation_domain) -}}
                        {% else %}
                            {{- placeholder|trans({}, sonata_admin.field_description.translationDomain) -}}
                        {% endif%}
                    </option>
                {% endif %}
                {% if preferred_choices|length > 0 %}
                    {% set options = preferred_choices %}
                    {{ block('choice_widget_options') }}
                    {% if choices|length > 0 %}
                        <option disabled="disabled">{{ separator }}</option>
                    {% endif %}
                {% endif %}
                {% set options = choices %}
                {{ block('choice_widget_options') }}
            </select>
        {% endif %}
    {% endspaceless %}
{% endblock choice_widget_collapsed %}

{% block date_widget %}
    {% spaceless %}
        {% if widget == 'single_text' %}
            {{ block('form_widget_simple') }}
        {% else %}
            {% if row is not defined or row == true %}
                {% set attr = attr|merge({'class': attr.class|default('') ~ ' row' }) %}
            {% endif %}
            {% set input_wrapper_class = input_wrapper_class|default('col-sm-4') %}
            <div {{ block('widget_container_attributes') }}>
                {{ date_pattern|replace({
                    '{{ year }}':  '<div class="'~ input_wrapper_class ~ '">' ~ form_widget(form.year) ~ '</div>',
                    '{{ month }}': '<div class="'~ input_wrapper_class ~ '">' ~ form_widget(form.month) ~ '</div>',
                    '{{ day }}':   '<div class="'~ input_wrapper_class ~ '">' ~ form_widget(form.day) ~ '</div>',
                })|raw }}
            </div>
        {% endif %}
    {% endspaceless %}
{% endblock date_widget %}

{% block time_widget %}
    {% spaceless %}
        {% if widget == 'single_text' %}
            {{ block('form_widget_simple') }}
        {% else %}
            {% if row is not defined or row == true %}
                {% set attr = attr|merge({'class': attr.class|default('') ~ ' row' }) %}
            {% endif %}
            {% set input_wrapper_class = input_wrapper_class|default('col-sm-6') %}
            <div {{ block('widget_container_attributes') }}>
                <div class="{{ input_wrapper_class }}">
                    {{ form_widget(form.hour) }}
                </div>
                {% if with_minutes %}
                    <div class="{{ input_wrapper_class }}">
                        {{ form_widget(form.minute) }}
                    </div>
                {% endif %}
                {% if with_seconds %}
                    <div class="{{ input_wrapper_class }}">
                        {{ form_widget(form.second) }}
                    </div>
                {% endif %}
            </div>
        {% endif %}
    {% endspaceless %}
{% endblock time_widget %}

{% block datetime_widget %}
    {% spaceless %}
        {% if widget == 'single_text' %}
            {{ block('form_widget_simple') }}
        {% else %}
            {% set attr = attr|merge({'class': attr.class|default('') ~ ' row' }) %}
            <div {{ block('widget_container_attributes') }}>
                {{ form_errors(form.date) }}
                {{ form_errors(form.time) }}

                {% if form.date.vars.widget == 'single_text' %}
                    <div class="col-sm-2">
                        {{ form_widget(form.date) }}
                    </div>
                {% else %}
                    {{ form_widget(form.date, {'row': false, 'input_wrapper_class': 'col-sm-2'}) }}
                {% endif %}

                {% if form.time.vars.widget == 'single_text' %}
                    <div class="col-sm-2">
                        {{ form_widget(form.time) }}
                    </div>
                {% else %}
                    {{ form_widget(form.time, {'row': false, 'input_wrapper_class': 'col-sm-2'}) }}
                {% endif %}
            </div>
        {% endif %}
    {% endspaceless %}
{% endblock datetime_widget %}

{% block form_row %}
    {% set show_label = show_label|default(true) %}
    {% set children_form = form.children|length %}
    {% set class_form_row = 'form-group' %}

    {% if sonata_admin.field_description %}
        {% if children_form is same as(0) and sonata_admin.field_description.type is not same as ('sonata_type_collection') %}
            {% if sonata_admin_code is same as ('financeiro.admin.conciliar_conta')%}
                {% set class_form_row = 'form_row col s4 campo-sonata' %}
            {% else %}
                {% set class_form_row = 'form_row col s3 campo-sonata' %}
            {% endif %}
        {% endif %}
    {% else %}
        {% set class_form_row = 'form_row col s3 campo-sonata' %}
    {% endif %}
    <div class="{{ class_form_row }}{% if errors|length > 0 %} has-error{% endif %}" id="sonata-ba-field-container-{{ id }}">
        {% if sonata_admin.field_description.options is defined %}
            {% set label = sonata_admin.field_description.options.name|default(label)  %}
        {% endif %}

        {% set div_class = 'sonata-ba-field' %}

        {% if label is same as(false) %}
            {% set div_class = div_class ~ ' sonata-collection-row-without-label fix-admin' %}
        {% endif %}
        {% if sonata_admin is defined and sonata_admin.options['form_type'] == 'horizontal' %}
            {% if label is same as(false) %}
                {% if 'collection' in form.parent.vars.block_prefixes %}
                    {% set div_class = div_class ~ ' col s12' %}
                {% else %}
                    {% set div_class = div_class ~ ' col s12' %}
                {% endif %}
            {% else %}
                {% set div_class = div_class ~ ' col s12' %}
            {% endif %}
        {% endif %}

        {% if show_label %}
            {{ form_label(form, label|default(null)) }}
        {% endif %}

        {% if sonata_admin is defined and sonata_admin_enabled %}
            {% set div_class = div_class ~ ' sonata-ba-field-' ~ sonata_admin.edit ~ '-' ~ sonata_admin.inline %}
        {% endif %}

        {% if errors|length > 0 %}
            {% set div_class = div_class ~ ' sonata-ba-field-error' %}
        {% endif %}

        <div class="{{ div_class }} ">
            {{ form_widget(form, {'horizontal': false, 'horizontal_input_wrapper_class': ''}) }} {# {'horizontal': false, 'horizontal_input_wrapper_class': ''} needed to avoid MopaBootstrapBundle messing with the DOM #}

            {% if errors|length > 0 %}
                <div class="help-block sonata-ba-field-error-messages">
                    <span class="close-help-block">
                        <i class="fa fa-times-circle" aria-hidden="true"></i>
                    </span>
                    <script>
                        $('.close-help-block').click(function(){
                            $('.sonata-ba-field-error-messages').hide();
                        });
                    </script>
                    {{ form_errors(form) }}
                </div>
            {% endif %}

            {% if sonata_admin is defined and sonata_admin_enabled and sonata_admin.field_description.help|default(false) %}
                <span class="help-description sonata-ba-field-help">
                    <i class="fa fa-question-circle" aria-hidden="true"></i>
                    {{ sonata_admin.admin.trans(sonata_admin.field_description.help, {}, sonata_admin.field_description.translationDomain)|raw }}
                </span>
            {% endif %}
        </div>
        {#<div class="spinner-load-hide spinner-load">#}
           {#<i class="fa fa-spinner fa-spin fa-3x fa-fw"></i><span class="sr-only">Loading...</span>#}
        {#</div>#}
    </div>
{% endblock form_row %}

{% block checkbox_row -%}
    {% set show_label = false %}
    {{ block('form_row') }}
{%- endblock checkbox_row %}

{% block radio_row -%}
    {% set show_label = false %}
    {{ block('form_row') }}
{%- endblock radio_row %}

{% block sonata_type_native_collection_widget_row %}
    {% spaceless %}
        <div class="sonata-collection-row">
            {% if allow_delete %}
            <div class="row">
                <div class="col-xs-1">
                    <a href="#" class="btn btn-link sonata-collection-delete">
                        <i class="fa fa-minus-circle"></i>
                    </a>
                </div>
                <div class="col-xs-11">
                    {% endif %}
                    {{ form_row(child, { label: false }) }}
                    {% if allow_delete %}
                </div>
            </div>
            {% endif %}
        </div>
    {% endspaceless %}
{% endblock sonata_type_native_collection_widget_row %}

{% block sonata_type_native_collection_widget %}
    {% spaceless %}
        {% if prototype is defined %}
            {% set child = prototype %}
            {% set allow_delete_backup = allow_delete %}
            {% set allow_delete = true %}
            {% set attr = attr|merge({'data-prototype': block('sonata_type_native_collection_widget_row'), 'data-prototype-name': prototype.vars.name, 'class': attr.class|default('') }) %}
            {% set allow_delete = allow_delete_backup %}
        {% endif %}
        <div {{ block('widget_container_attributes') }}>
            {{ form_errors(form) }}
            {% for child in form %}
                {{ block('sonata_type_native_collection_widget_row') }}
            {% endfor %}
            {{ form_rest(form) }}
            {% if allow_add %}
                <div><a href="#" class="btn btn-link sonata-collection-add"><i class="fa fa-plus-circle"></i></a></div>
            {% endif %}
        </div>
    {% endspaceless %}
{% endblock sonata_type_native_collection_widget %}

{% block sonata_type_immutable_array_widget %}
    {% spaceless %}
        <div {{ block('widget_container_attributes') }}>
            {{ form_errors(form) }}

            {% for key, child in form %}
                {{ block('sonata_type_immutable_array_widget_row') }}
            {% endfor %}

            {{ form_rest(form) }}
        </div>
    {% endspaceless %}
{% endblock sonata_type_immutable_array_widget %}

{% block sonata_type_immutable_array_widget_row %}
    {% spaceless %}
        <div class="form-group{% if child.vars.errors|length > 0%} error{%endif%}" id="sonata-ba-field-container-{{ id }}-{{ key }}">

            {{ form_label(child) }}

            {% set div_class = "" %}
            {% if sonata_admin.options['form_type'] == 'horizontal' %}
                {% set div_class = 'col-sm-9' %}
            {% endif%}

            <div class="{{ div_class }} sonata-ba-field sonata-ba-field-{{ sonata_admin.edit }}-{{ sonata_admin.inline }} {% if child.vars.errors|length > 0 %}sonata-ba-field-error{% endif %}">
                <span class="close-help-block">
                        <i class="fa fa-times-circle" aria-hidden="true"></i>
                    </span>
                <script>
                    $('.close-help-block').click(function(){
                        $('.sonata-ba-field-error-messages').hide();
                    });
                </script>
                {{ form_widget(child, {'horizontal': false, 'horizontal_input_wrapper_class': ''}) }} {# {'horizontal': false, 'horizontal_input_wrapper_class': ''} needed to avoid MopaBootstrapBundle messing with the DOM #}
            </div>

            {% if child.vars.errors|length > 0 %}
                <div class="help-block sonata-ba-field-error-messages">
                    {{ form_errors(child) }}
                </div>
            {% endif %}
        </div>
    {% endspaceless %}
{% endblock %}

{% block sonata_type_model_autocomplete_widget %}
    {% include template %}
{% endblock sonata_type_model_autocomplete_widget %}

{% block autocomplete_widget %}
    {% include template %}
{% endblock autocomplete_widget %}

{# Inicio da alteraÃ§Ã£o para o funcionamento do type collection #}

{% block sonata_type_admin_widget %}
    {#admin {{ sonata_admin.field_description.mappingtype }}#}
    {% if sonata_admin.field_description.mappingtype == constant('Doctrine\\ORM\\Mapping\\ClassMetadataInfo::ONE_TO_ONE') %}
        {{ block('sonata_admin_orm_one_to_one_widget') }}
    {% elseif sonata_admin.field_description.mappingtype == constant('Doctrine\\ORM\\Mapping\\ClassMetadataInfo::MANY_TO_ONE') %}
        {{ block('sonata_admin_orm_many_to_one_widget') }}
    {% elseif sonata_admin.field_description.mappingtype == constant('Doctrine\\ORM\\Mapping\\ClassMetadataInfo::MANY_TO_MANY') %}
        {{ block('sonata_admin_orm_many_to_many_widget') }}
    {% elseif sonata_admin.field_description.mappingtype == constant('Doctrine\\ORM\\Mapping\\ClassMetadataInfo::ONE_TO_MANY') %}
        {{ block('sonata_admin_orm_one_to_many_widget') }}
    {% else %}
        INVALID MODE : {{ id }}
    {% endif %}
{% endblock %}

{% block sonata_type_collection_widget %}
    {% if sonata_admin.field_description.mappingtype == constant('Doctrine\\ORM\\Mapping\\ClassMetadataInfo::ONE_TO_MANY') %}
        {{ block('sonata_admin_orm_one_to_many_widget') }}
    {% elseif sonata_admin.field_description.mappingtype == constant('Doctrine\\ORM\\Mapping\\ClassMetadataInfo::MANY_TO_MANY') %}
        {{ block('sonata_admin_orm_many_to_many_widget') }}
    {% else %}
        INVALID MODE : {{ id }} - type : sonata_type_collection - mapping : {{ sonata_admin.field_description.mappingtype }}
    {% endif %}
{% endblock %}

{# Fim da alteraÃ§Ã£o para o funcionamento do type collection #}


{% block sonata_type_choice_field_mask_widget %}
    {{ block('choice_widget') }}
    {% set main_form_name = id|slice(0, id|length - name|length) %}
    <script>
        jQuery(document).ready(function() {
            var allFields = {{ all_fields|json_encode|raw }};
            var map = {{ map|json_encode|raw }};

            showMaskChoiceEl = jQuery('#{{ main_form_name }}{{ name }}');

            showMaskChoiceEl.on('change', function () {
                choice_field_mask_show(jQuery(this).val());
            });

            function choice_field_mask_show(val)
            {
                var controlGroupIdFunc = function (field) {
                    return '#sonata-ba-field-container-{{ main_form_name }}' + field;

                };
                if (map[val] == undefined) {
                    jQuery.each(allFields, function (i, field) {
                        jQuery(controlGroupIdFunc(field)).hide();
                    });
                    return;
                }

                jQuery.each(allFields, function (i, field) {
                    jQuery(controlGroupIdFunc(field)).hide();
                });
                jQuery.each(map[val], function (i, field) {
                    jQuery(controlGroupIdFunc(field)).show();
                });
            }
            choice_field_mask_show(showMaskChoiceEl.val());
        });

    </script>
{% endblock %}

{%  block sonata_type_choice_multiple_sortable %}
    <input type="hidden" name="{{ full_name }}" id="{{ id }}" value="{{ value|join(',') }}" />

    <script>
        jQuery(document).ready(function() {
            Admin.setup_sortable_select2(jQuery('#{{ id }}'), {{ form.vars.choices|json_encode|raw }});
        });
    </script>
{% endblock %}


{% block urbem_dynamic_collection_type_row %}
    <div class="col-md-12">
        {{ form_errors(form) }}
        {{ form_widget(form) }}
    </div>
{% endblock %}

{% block urbem_dynamic_collection_type_widget %}
    {% set totalInputLine = 0 %}

    {% if true == allow_add %}
        {% set totalInputLine = form.dynamic_collection.vars.prototype.children|length %}

    {% endif %}

    {% set class = "margin-top-buton-30" %}
    {% if totalInputLine is divisible by(4) %}
        {% set class = "" %}
    {% endif %}

    {% set buttonRemove = '' %}

    {% if true == allow_delete %}
        {% set buttonRemove = '<button type="button" class="remove-collection white-text blue darken-4 btn btn-success save '~class~' name="btn_create_and_list"><i class="material-icons left">delete</i>Remover</button>' %}
    {% endif %}

    <script type="text/javascript">
        var contentCollectionFormJson =  jQuery.parseJSON('{{ form.dynamic_collection|collectionDynamicFormToJson | raw }}');
    </script>

    {{ form_label(form) }}

    <ul class="dynamic_collection" {% if true == allow_add %}data-prototype="{{ form_widget(form.dynamic_collection.vars.prototype)|e('html_attr') }}"{% endif %}>
        {% for collection in form.dynamic_collection %}
            <li class="list-colletion-custom filtro-sonata margin-top-buton-3 height-fit-content">
                {{ form_widget(collection) }}
                {{ buttonRemove | raw }}
            </li>
        {% endfor %}
    </ul>

    <script>
        jQuery(document).ready(function() {
            {% if true == allow_add %}
                var $collectionHolder = $('ul.dynamic_collection');

                var $addCollectionLink = $('<button type="button" class="add_collection_link margin-top-button-search white-text blue darken-4 btn btn-success save" name="btn_create_and_list"><i class="material-icons left">add</i>Adicionar</button>');
                var $newLinkLi = $('<li></li>').append($addCollectionLink);

                $addCollectionLink.on('click', function(e) {
                    // prevent the link from creating a "#" on the URL
                    e.preventDefault();

                    // add a new tag form (see code block below)
                    addItemCollectionForm($collectionHolder, $newLinkLi);

                    $("select.select2-parameters").select2();
                });

                function addItemCollectionForm($collectionHolder, $newLinkLi) {
                    // Get the data-prototype explained earlier;
                    var prototype = $collectionHolder.data('prototype');

                    // Replace '$$name$$' in the prototype's HTML to
                    // instead be a number based on how many items we have
                    var newForm = prototype.replace(/__name__/g, $collectionHolder.find('> li').length);

                    // Display the form in the page in an li, before the "Add a tag" link li
                    var $newFormLi = $('<li class="list-colletion-custom filtro-sonata margin-top-buton-3 height-fit-content"></li>').append(newForm);

                    // also add a remove button, just for this example
                    $newFormLi.append('{{ buttonRemove | raw }}');

                    $newLinkLi.before($newFormLi);

                    // load button
                    loadRemoveCollection();

                    // Fix altura e largura dos inputs
                    UrbemSonata.fixClassNameContainerInputType();
                }

                // add the "add a tag" anchor and li to the tags ul
                $collectionHolder.append($newLinkLi);
            {% endif %}

            {% if true == allow_delete %}
                // handle the removal, just for this example
                function loadRemoveCollection() {
                    $('.remove-collection').click(function (e) {
                        e.preventDefault();

                        $(this).parent().remove();
                    });
                }

                loadRemoveCollection();
            {% endif %}
        });
    </script>
{% endblock %}